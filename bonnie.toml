version="0.3.2"

[scripts]
setup.cmd.generic = [
    # Create the dist directories for the CLI in the `basic` example
    # These are gitignored, and so not placed into Git unfortunately
    "mkdir -p tests/basic/.perseus/dist",
    "mkdir -p tests/basic/.perseus/dist/static",
    "mkdir -p tests/basic/.perseus/dist/exported",
    "bonnie copy-subcrates",
    "cargo build",
    "npm i --prefix ./website",
    "echo \"\n\nThe Perseus repository is ready for local development! Type 'bonnie help' to see the available commands you can run here. Also, please ensure that you have 'npx' available and that you've installed 'tailwindcss', `concurrently`, `serve` and 'browser-sync' ('npm i -g tailwindcss concurrently serve browser-sync') if you'll be working with the website or running `bonnie dev export-serve ...`.\""
]
setup.cmd.targets.windows = [
    "New-Item -Force -ItemType directory -Path examples\\basic\\.perseus\\dist\\static",
    "New-Item -Force -ItemType directory -Path examples\\basic\\.perseus\\dist\\exported",
    # "Write-Host \"Setup Subcrates\"",
    "bonnie copy-subcrates",
    "cargo build",
    "npm i --prefix website",
    "Write-Host \"\n\nThe Perseus repository is ready for local development! Type 'bonnie help' to see the available commands you can run here. Also, please ensure that you have 'npx' available and that you've installed 'tailwindcss', `concurrently`, `serve` and 'browser-sync' ('npm i -g tailwindcss concurrently serve browser-sync') if you'll be working with the website or running `bonnie dev export-serve ...`.\""
]
setup.desc = "sets everything up for local development"

dev.subcommands.export-serve.cmd = [
    "bonnie dev example %example export",
    "serve -p 8080 examples/%example/.perseus/dist/exported/"
]
dev.subcommands.export-serve.args = [ "example" ]
dev.subcommands.export-serve.desc = "exports and serves the given example locally"
dev.subcommands.export-serve-deploy-relative.cmd.generic = [
    "PERSEUS_BASE_PATH=http://localhost:8080/relative bonnie dev example %example deploy --export-static",
    "cd examples/%example",
    "mkdir pkg.new",
    "mv pkg/ pkg.new/",
    "mv pkg.new/ pkg/",
    "mv pkg/pkg/ pkg/relative",
    "serve -p 8080 pkg/"
]
dev.subcommands.export-serve-deploy-relative.cmd.targets.windows = [
    "powershell -Command { $env:PERSEUS_BASE_PATH=\"http://localhost:8080/relative\"; bonnie dev example %example deploy --export-static }",
    "cd examples\\%example",
    "New-Item -Force -ItemType directory -Path pkg.new",
    "Move-Item  -Path pkg -Destination pkg.new",
    "Rename-Item -Path pkg.new -NewName pkg",
    "Rename-Item -Path pkg\\pkg -NewName relative",
    "serve -p 8080 pkg/"
]
dev.subcommands.export-serve-deploy-relative.args = [ "example" ]
dev.subcommands.export-serve-deploy-relative.desc = "deploy exports and serves the given example at a relative local path"

dev.subcommands.example.cmd.generic = [
    "bonnie copy-subcrates",
    "cd packages/perseus-cli",
    # Point this live version of the CLI at the given example
    "TEST_EXAMPLE=../../examples/%example cargo run -- %%"
]
dev.subcommands.example.cmd.targets.windows = [
    "bonnie copy-subcrates",
    "cd packages/perseus-cli",
    # Point this live version of the CLI at the given example
    "powershell -Command { $env:TEST_EXAMPLE=\"../../examples/%example\"; cargo run -- %% }"
]
dev.subcommands.example.args = [ "example" ]
dev.subcommands.example.desc = "runs the given example using a live version of the cli"

dev.subcommands.test.cmd = [
    "bonnie copy-subcrates",
    "cd packages/perseus-cli",
    # Point this live version of the CLI at the given test
    "TEST_EXAMPLE=../../tests/%test cargo run -- %%"
]
dev.subcommands.test.args = [ "test" ]
dev.subcommands.test.desc = "runs the given test using a live version of the cli"

site.cmd = "concurrently \"bonnie site export\" \"bonnie site build-tailwind\""
site.desc = "builds and serves the site for local development (requires `concurrently`)"
site.subcommands.export.cmd = [
    "cd website",
    "perseus export -sw"
]
site.subcommands.export.desc = "exports and serves the site, watching for changes"
site.subcommands.tinker.cmd = [
    "cd website",
    "perseus tinker"
]
site.subcommands.tinker.desc = "runs tinkers on the website"
site.subcommands.build-tailwind.cmd = [
    "cd website",
    "tailwindcss -c ./tailwind.config.js -o ./static/tailwind.css -w"
]
site.subcommands.build-tailwind.desc = "builds a tailwind stylesheet for development, watching for changes"
site.subcommands.build-tailwind.subcommands.prod.cmd.generic = [
    "cd website",
    "NODE_ENV=production tailwindcss -c ./tailwind.config.js -o ./static/tailwind.css --minify"
]
site.subcommands.build-tailwind.subcommands.prod.cmd.targets.windows = [
    "cd website",
    "powershell -Command { $env:NODE_ENV=\"production\"; tailwindcss -c ./tailwind.config.js -o ./static/tailwind.css --minify }"
]
site.subcommands.build-tailwind.subcommands.prod.desc = "builds a tailwind stylesheet for production (minifying)"
site.subcommands.deploy.cmd.generic = [
    "bonnie site build-tailwind prod",
    "cd website",
    "PERSEUS_BASE_PATH=http://localhost:8080/perseus perseus tinker",
    # Point this live version of the CLI at the given example
    "PERSEUS_BASE_PATH=http://localhost:8080/perseus perseus deploy -e"
]
site.subcommands.deploy.cmd.targets.windows = [
    "bonnie site build-tailwind prod",
    "cd website",
    "powershell -Commmand { $env:PERSEUS_BASE_PATH=\"http://localhost:8080/perseus\"; perseus tinker }",
    # Point this live version of the CLI at the given example
    "powershell -Command { $env:PERSEUS_BASE_PATH=\"http://localhost:8080/perseus\"; perseus deploy -e }"
]
site.subcommands.deploy.desc = "builds the website for production and finalizes it at `website/pkg`"
site.subcommands.deploy-prod.cmd.generic = [
    "bonnie site build-tailwind prod",
    "cd website",
    "PERSEUS_BASE_PATH=http://localhost:8080/perseus perseus tinker",
    # Point this live version of the CLI at the given example
    "PERSEUS_BASE_PATH=https://arctic-hen7.github.io/perseus perseus deploy -e",
    # Build the Tribble contributing docs
    "cd ..",
    "tribble deploy --path https://arctic-hen7.github.io/perseus/tribble -o tribble",
    "mv tribble website/pkg/"
]
site.subcommands.deploy-prod.cmd.targets.windows = [
    "bonnie site build-tailwind prod",
    "cd website",
    "powershell -Command { $env:PERSEUS_BASE_PATH=\"http://localhost:8080/perseus\"; perseus tinker }",
    # Point this live version of the CLI at the given example
    "powershell -Command { $env:PERSEUS_BASE_PATH=\"https://arctic-hen7.github.io/perseus\"; perseus deploy -e }",
    # Build the Tribble contributing docs
    "cd ..",
    "tribble deploy --path https://arctic-hen7.github.io/perseus/tribble -o tribble",
    "Move-Item -Path tribble -Destination website\\pkg"
]
site.subcommands.deploy-prod.desc = "builds the website for production on GitHub Pages and finalizes it at `website/pkg`"
site.subcommands.deploy.subcommands.serve.cmd.generic = [
    "cd website",
    "mkdir pkgs",
    "mv pkg pkgs/perseus",
    "mv pkgs pkg",
    "serve -p 8080 pkg/"
]
site.subcommands.deploy.subcommands.serve.cmd.targets.windows = [
    "cd website",
    "New-Item -Force -ItemType directory -Path pkgs",
    "Move-Item -Path pkg -Destination pkgs/perseus",
    "Rename-Item -Path pkgs -NewName pkg",
    "serve -p 8080 pkg/"
]
site.subcommands.deploy.subcommands.serve.desc = "serves the website for local testing after it's been built for production"
site.subcommands.run.cmd = [
    "bonnie site build-tailwind",
    "cd website",
    # Point this live version of the CLI at the given example
    "perseus serve",
]
site.subcommands.run.desc = "runs the website without watching for changes"

build = "cargo build"

copy-subcrates.cmd.generic = [
    # The CLI needs the `.perseus/` directory copied in for packaging (and we need to rename `Cargo.toml` to `Cargo.toml.old`)
    "cd packages/perseus-cli",
    "rm -rf ./.perseus",
    "cp -r ../../tests/basic/.perseus/ .perseus/",
    "mv .perseus/Cargo.toml .perseus/Cargo.toml.old",
    "mv .perseus/server/Cargo.toml .perseus/server/Cargo.toml.old",
    "mv .perseus/builder/Cargo.toml .perseus/builder/Cargo.toml.old",
    # Remove distribution artifacts (they clog up the final bundle)
    "rm -rf .perseus/dist",
    "mkdir -p .perseus/dist",
    "mkdir -p .perseus/dist/static",
    "mkdir -p .perseus/dist/exported",
    # Replace the example's package name with a token the CLI can use (compatible with alternative engines as well)
    # We only need to do this in the root package, the others depend on it
    "sed -i 's/perseus-test-basic/USER_PKG_NAME/' .perseus/Cargo.toml.old",
    # Replace the relative path references with tokens too
    "sed -i 's/path = \"\\.\\.\\/\\.\\.\\/\\.\\.\\/packages\\/perseus\"/PERSEUS_VERSION/' .perseus/Cargo.toml.old",
    "sed -i 's/path = \"\\.\\.\\/\\.\\.\\/\\.\\.\\/\\.\\.\\/packages\\/perseus\"/PERSEUS_VERSION/' .perseus/builder/Cargo.toml.old",
    # These will need to be updated as more integrations are added
    "sed -i 's/path = \"\\.\\.\\/\\.\\.\\/\\.\\.\\/\\.\\.\\/packages\\/perseus\"/PERSEUS_VERSION/' .perseus/server/Cargo.toml.old",
    "sed -i 's/path = \"\\.\\.\\/\\.\\.\\/\\.\\.\\/\\.\\.\\/packages\\/perseus-actix-web\"/PERSEUS_ACTIX_WEB_VERSION/' .perseus/server/Cargo.toml.old",
    "sed -i 's/path = \"\\.\\.\\/\\.\\.\\/\\.\\.\\/\\.\\.\\/packages\\/perseus-warp\"/PERSEUS_WARP_VERSION/' .perseus/server/Cargo.toml.old"

]
copy-subcrates.cmd.targets.windows = [
    # The CLI needs the `.perseus/` directory copied in for packaging (and we need to rename `Cargo.toml` to `Cargo.toml.old`)
    "cd packages\\perseus-cli",
    # Remove-Item is asynchronous before Windows 20H2 and might fail
    "Remove-Item -Force -Recurse -Path .perseus",
    "New-Item -Force -ItemType directory -Path .perseus",
    "Copy-Item -Recurse -Path ..\\..\\examples\\basic\\.perseus\\* -Destination .perseus",
    "Rename-Item -Path .perseus\\Cargo.toml -NewName Cargo.toml.old",
    "Rename-Item -Path .perseus\\server\\Cargo.toml -NewName Cargo.toml.old",
    "Rename-Item -Path .perseus\\builder\\Cargo.toml -NewName Cargo.toml.old",
    # Remove distribution artifacts (they clog up the final bundle)
    "Remove-Item -Force -Recurse .perseus\\dist",
    "New-Item -Force -ItemType directory -Path .perseus\\dist\\static",
    "New-Item -Force -ItemType directory -Path .perseus\\dist\\exported",
]
copy-subcrates.desc = "copies `.perseus/` into the CLI directory for packaging/usage"

check.cmd = [
    "cargo check --all",
    "cargo fmt --all -- --check",
    "cargo clippy --all"
]
check.desc = "checks code for formatting errors and the like"

ci-prep.cmd.generic = [
    "mkdir -p tests/basic/.perseus/dist",
    "mkdir -p tests/basic/.perseus/dist/static",
]
ci-prep.cmd.targets.windows = [
    "New-Item -Force -ItemType directory -Path tests\\basic\\.perseus\\dist",
    "New-Item -Force -ItemType directory -Path tests\\basic\\.perseus\\static",
]
ci-prep.desc = "creates empty directories to preserve the file structure that testing expects"

test.cmd = [
    "cargo test", # This will ignore Wasm tests
    # Run tests for each example
    "bonnie test single basic --headless",
    "bonnie test single i18n --headless",
    "bonnie test single plugins --headless",
    "bonnie test single showcase --headless"
]
test.desc = "runs all tests headlessly (assumes geckodriver running in background)"
test.subcommands.core.cmd = "cargo test"
test.subcommands.core.desc = "runs cargo tests only"
test.subcommands.single.cmd.generic = "bash ./test.sh %test %%" # A script can do backgrounding properly
test.subcommands.example.cmd.targets.windows = "Write-Host \"Not implemented for windows\""
test.subcommands.single.args = [ "test" ]
test.subcommands.single.desc = "tests a single tests (assumes geckodriver running in background), use `--headless` to run headlessly"

# Releases the project (maintainers only)
# We commit all staged files so we can manually bump the Cargo version
release.cmd = [
    "git checkout stable",
    "git merge main",
    "standard-version --sign --commit-all %%",
    "git push --follow-tags origin stable",
    "git checkout main",
    "git merge stable",
    "git push origin main"
]
release.desc = "creates a new project release and pushes it to github (cargo version must be manually bumped)"
replace-versions.cmd.generic = "find . \\( \\( -name \"*Cargo.toml\" -or -name \"*Cargo.toml.example\" -or -name \"*.md\" \\) -not -name \"CHANGELOG.md\" -not -path \"./target/*\" -not -path \"./website/*\" -not -path \"*.perseus*\" -or \\( -name \"*Cargo.toml\" -path \"./tests/basic/.perseus/*\" -not -path \"./tests/basic/.perseus/dist/*\" \\) \\) -exec sed -i -e 's/%old_version/%new_version/g' {} \\;"
replace-versions.cmd.generic = "find . \\( \\( -name \"*Cargo.toml\" -or -name \"*Cargo.toml.example\" -or -name \"*.md\" \\) -not -name \"CHANGELOG.md\" -not -path \"./target/*\" -not -path \"./website/*\" -not -path \"*.perseus*\" -or \\( -name \"*Cargo.toml\" -path \"./examples/basic/.perseus/*\" -not -path \"./examples/basic/.perseus/dist/*\" \\) \\) -exec sed -i -e 's/%old_version/%new_version/g' {} \\;"
# TODO That one is kind of hard on default windows
replace-versions.cmd.targets.windows = "Write-Host \"Unimplemented on windows\""
replace-versions.args = [ "old_version", "new_version" ]

# Publishes each package
publish.cmd = [
    "bonnie copy-subcrates",
    "bonnie check-branch stable",
    "cd packages/perseus-macro",
    "cargo publish %%",
    "sleep 60", # Wait for `crates.io` to be ready
    "cd ../perseus",
    "cargo publish %%",
    "cd ../perseus-cli",
    "cargo publish --allow-dirty %%", # Without this flag, `.perseus` will be a problem because it's not in Git
    # We delay this so that `crates.io` can have time to host the core
    "cd ../perseus-actix-web",
    "cargo publish %%",
    "cd ../perseus-warp",
    "cargo publish %%"
]
publish.desc = "publishes all packages to crates.io (needs branch 'stable')"

# TODO : Windows
check-branch.cmd.generic.exec = "[[ $(git rev-parse --abbrev-ref HEAD) == \"%branch\" ]] && exit 0 || echo \"You need to be on Git branch '%branch' to run this command.\"; exit 1"
check-branch.cmd.generic.shell = ["bash", "-c", "{COMMAND}"]
check-branch.cmd.targets.windows.exec = "Write-Host \"Unimplemented on windows\""
check-branch.cmd.targets.windows.shell = ["powershell", "-Command", "{COMMAND}"]
check-branch.args = [ "branch" ]
check-branch.desc = "checks if the current git branch is the given argument, signals with exit codes (and warns), this will prevent following commands from running if it fails"
